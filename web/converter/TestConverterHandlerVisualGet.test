<!DOCTYPE html>
<html lang="en">


<style>

    .node circle {
        fill: #fff;
        stroke: steelblue;
        stroke-width: 3px;
        r: 16;
    }

    .node text {
        font: 12px sans-serif;
        font-weight: bold;
    }

    .link {
        fill: none;
        stroke: #ccc;
        stroke-width: 2px;
    }

    .link text {
        font: 12px sans-serif;
    }

    .link.text2 {
        font: 20px sans-serif;
    }

</style>

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>IG Parser</title></br>
    <link rel="shortcut icon" type="image/x-icon" href="/css/favicon.ico">
    <link rel="stylesheet" href="/css/default.css">
    
    <script src="/libraries/ace/ace.js" type="text/javascript" charset="utf-8"></script>
</head>

<body>
<script>

    

    function CopyToClipboard(containerid) {
        if (document.selection) {
            let range = document.body.createTextRange();
            range.moveToElementText(document.getElementById(containerid));
            range.select().createTextRange();
            document.execCommand("copy");
        } else if (window.getSelection) {
            let range = document.createRange();
            range.selectNode(document.getElementById(containerid));
            window.getSelection().addRange(range);
            let res = document.execCommand("copy");
            if (res !== true) {
                alert("Text-to-Clipboard copying failed. Please select output manually and copy via keyboard.")
            }
        }
    }

    

    function check(target) {
        let offset = 0
        target.style.height = 'auto';
        target.style.height = target.scrollHeight + offset + 'px';
    }
</script>

<p>&nbsp;</p>
<p>&nbsp;</p>
<h1>IG Parser</h1>
<h2>A Parser for Institutional Statements encoded in the IG Script Notation introduced as part of the Institutional Grammar 2.0</h2>
<p>&nbsp;</p>
<p>&nbsp;</p>
<div class="form">
    <form method="POST">
        
        <span data-text="This entry field is for optional use. You can paste the original statement here as a reference while encoding it in the &#39;Encoded Statement&#39; field." class="tooltip">Original Statement:</span>
        <textarea name="rawStmt" onfocusin="check(this)" onkeyup="check(this)">Regional Managers, on behalf of the Secretary, may review, reward, or sanction approved certified production and handling operations and accredited certifying agents for compliance with the Act or regulations in this part, under the condition that Operations were non-compliant or violated organic farming provisions and Manager has concluded investigation.</textarea><br />
        
        <span data-text="Opens a separate help page explaining the IG Script syntax (opens new tab)." class="tooltip"><a href="/help/" target="_blank">Encoded Statement:</a></span>
        
        <div id="editor" name="editor" onChange="copyEditorContentToTextArea()">A,p(Regional) A[role=enforcer,type=animate](Managers), Cex(on behalf of the Secretary), D[stringency=permissive](may) I[act=performance]((review [AND] (reward [XOR] sanction))) Bdir,p(approved) Bdir1,p(certified) Bdir1[role=monitored,type=animate](production [operations]) and Bdir[role=monitored,type=animate](handling operations) and Bdir2,p(accredited) Bdir2[role=monitor,type=animate](certifying agents) Cex[ctx=purpose](for compliance with the (Act or [XOR] regulations in this part)) under the condition that {Cac[state]{A[role=monitored,type=animate](Operations) I[act=violate]((were non-compliant [OR] violated)) Bdir[type=inanimate](organic farming provisions)} [AND] Cac[state]{A[role=enforcer,type=animate](Manager) I[act=terminate](has concluded) Bdir[type=activity](investigation)}}.</div>
        <script>
            var editor = ace.edit("editor");
            editor.session.setMode("ace/mode/text");
            
            editor.setOption("showLineNumbers", true);
            editor.setOption("wrap", true);
            editor.setOption("showGutter", true); 
            editor.setOption("showPrintMargin", false); 
            editor.setOption("behavioursEnabled", false);
            editor.setOption("cursorStyle", "ace");
            editor.setOption("fontFamily", "monospace"); 
            editor.setOption("fontSize", 16);
            editor.setOption("minLines", 5); 
            editor.setOption("maxLines", 30); 

            

            function copyEditorContentToTextArea() {
                var ta = document.getElementById("codedStmt");
                
                ta.value = editor.getValue();
            }
        </script>

        
        <textarea id="codedStmt" name="codedStmt" onfocusin="check(this)" onkeyup="check(this)" style="display:none;">A,p(Regional) A[role=enforcer,type=animate](Managers), Cex(on behalf of the Secretary), D[stringency=permissive](may) I[act=performance]((review [AND] (reward [XOR] sanction))) Bdir,p(approved) Bdir1,p(certified) Bdir1[role=monitored,type=animate](production [operations]) and Bdir[role=monitored,type=animate](handling operations) and Bdir2,p(accredited) Bdir2[role=monitor,type=animate](certifying agents) Cex[ctx=purpose](for compliance with the (Act or [XOR] regulations in this part)) under the condition that {Cac[state]{A[role=monitored,type=animate](Operations) I[act=violate]((were non-compliant [OR] violated)) Bdir[type=inanimate](organic farming provisions)} [AND] Cac[state]{A[role=enforcer,type=animate](Manager) I[act=terminate](has concluded) Bdir[type=activity](investigation)}}.</textarea><br />


<span data-text="This section includes specific customizations for the output generation, which affect the generated output. Where larger numbers of statements are encoded for analytical purposes, ensure the consistent parameterization for all generated statements." class="tooltip">Parameters:</span>

<input id="annotations" name="annotations" type="checkbox" unchecked /><label for="annotations">Include IG Logico annotations in output (default: off)</label>
<input id="dov" name="dov" type="checkbox" unchecked /><label for="dov">Include Degree of Variability (accumulated toward root node) in output (default: off)</label>
<input id="propertyTree" name="propertyTree" type="checkbox" checked /><label for="propertyTree">Embed component properties in tree structure (as opposed to capturing those in labels associated with component) (default: on)</label>
<input id="binaryTree" name="binaryTree" type="checkbox" unchecked /><label for="binaryTree">Print binary logical tree structure (decompose all logical linkages for given components in binary form) (default: off)</label>
<input id="actCondTop" name="actCondTop" type="checkbox" unchecked /><label for="actCondTop">Print activation conditions node (if present) as first node in output (default: off)</label>
Height of output canvas (in pixels): <input name="canvasHeight" type="number" value="2000">
Width of output canvas (in pixels): <input name="canvasWidth" type="number" value="4000"><br />

<input value="Generate visual output" type="submit">


</form>
</div>

</body>
</html>